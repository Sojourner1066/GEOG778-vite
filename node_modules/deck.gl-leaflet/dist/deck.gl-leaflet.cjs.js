'use strict';

var L = require('leaflet');
var core = require('@deck.gl/core');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var L__namespace = /*#__PURE__*/_interopNamespaceDefault(L);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function getViewState(map) {
    return {
        longitude: map.getCenter().lng,
        latitude: map.getCenter().lat,
        zoom: map.getZoom() - 1,
        pitch: 0,
        bearing: 0
    };
}
function createDeckInstance(map, container, deck, props) {
    if (!deck) {
        const viewState = getViewState(map);
        deck = new core.Deck({
            ...props,
            parent: container,
            controller: false,
            style: { zIndex: 'auto' },
            viewState,
        });
    }
    return deck;
}
function updateDeckView(deck, map) {
    const viewState = getViewState(map);
    // console.log(viewState);
    deck.setProps({ viewState });
    deck.redraw();
}

var _LeafletLayer_instances, _LeafletLayer_getMap, _LeafletLayer_getZoomAnimated, _LeafletLayer_update, _LeafletLayer_pauseAnimation, _LeafletLayer_unpauseAnimation, _LeafletLayer_reset, _LeafletLayer_onMoveStart, _LeafletLayer_onMoveEnd, _LeafletLayer_onZoomStart, _LeafletLayer_onAnimZoom, _LeafletLayer_onZoom, _LeafletLayer_onZoomEnd, _LeafletLayer_updateTransform;
class LeafletLayer extends L__namespace.Layer {
    constructor(props) {
        super();
        _LeafletLayer_instances.add(this);
        this._container = undefined;
        this._deck = undefined;
        this._animate = undefined;
        this.props = props;
    }
    onAdd() {
        let pane = this.getPane();
        if (!pane) {
            return this;
        }
        this._container = L__namespace.DomUtil.create('div');
        this._container.className = 'leaflet-layer';
        if (__classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getZoomAnimated).call(this)) {
            L__namespace.DomUtil.addClass(this._container, 'leaflet-zoom-animated');
        }
        pane.appendChild(this._container);
        this._deck = createDeckInstance(this._map, this._container, this._deck, this.props);
        __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_update).call(this);
        return this;
    }
    onRemove(_map) {
        if (!this._container || !this._deck) {
            return this;
        }
        L__namespace.DomUtil.remove(this._container);
        this._container = undefined;
        this._deck.finalize();
        this._deck = undefined;
        return this;
    }
    getEvents() {
        return {
            viewreset: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_reset),
            movestart: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onMoveStart),
            moveend: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onMoveEnd),
            zoomstart: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onZoomStart),
            zoom: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onZoom),
            zoomend: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onZoomEnd),
            ...(__classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getZoomAnimated).call(this) ? { zoomanim: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onAnimZoom) } : {}),
        };
    }
    setProps(props) {
        Object.assign(this.props, props);
        if (this._deck) {
            this._deck.setProps(props);
        }
    }
    pickObject(opts) {
        if (!this._deck) {
            return null;
        }
        return this._deck.pickObject(opts);
    }
    pickMultipleObjects(opts) {
        if (!this._deck) {
            return [];
        }
        return this._deck.pickMultipleObjects(opts);
    }
    pickObjects(opts) {
        if (!this._deck) {
            return [];
        }
        return this._deck.pickObjects(opts);
    }
}
_LeafletLayer_instances = new WeakSet(), _LeafletLayer_getMap = function _LeafletLayer_getMap() {
    return this._map;
}, _LeafletLayer_getZoomAnimated = function _LeafletLayer_getZoomAnimated() {
    return this._zoomAnimated;
}, _LeafletLayer_update = function _LeafletLayer_update() {
    if (!this._container || !this._deck) {
        return;
    }
    if (__classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this)._animatingZoom) {
        return;
    }
    const size = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getSize();
    this._container.style.width = `${size.x}px`;
    this._container.style.height = `${size.y}px`;
    // invert map position
    const offset = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this)._getMapPanePos().multiplyBy(-1);
    L__namespace.DomUtil.setPosition(this._container, offset);
    updateDeckView(this._deck, this._map);
}, _LeafletLayer_pauseAnimation = function _LeafletLayer_pauseAnimation() {
    if (!this._deck) {
        return;
    }
    if (this._deck.props._animate) {
        this._animate = this._deck.props._animate;
        this._deck.setProps({ _animate: false });
    }
}, _LeafletLayer_unpauseAnimation = function _LeafletLayer_unpauseAnimation() {
    if (!this._deck) {
        return;
    }
    if (this._animate) {
        this._deck.setProps({ _animate: this._animate });
        this._animate = undefined;
    }
}, _LeafletLayer_reset = function _LeafletLayer_reset() {
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_updateTransform).call(this, __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getCenter(), __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getZoom());
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_update).call(this);
}, _LeafletLayer_onMoveStart = function _LeafletLayer_onMoveStart() {
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_pauseAnimation).call(this);
}, _LeafletLayer_onMoveEnd = function _LeafletLayer_onMoveEnd() {
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_update).call(this);
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_unpauseAnimation).call(this);
}, _LeafletLayer_onZoomStart = function _LeafletLayer_onZoomStart() {
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_pauseAnimation).call(this);
}, _LeafletLayer_onAnimZoom = function _LeafletLayer_onAnimZoom(event) {
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_updateTransform).call(this, event.center, event.zoom);
}, _LeafletLayer_onZoom = function _LeafletLayer_onZoom() {
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_updateTransform).call(this, __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getCenter(), __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getZoom());
}, _LeafletLayer_onZoomEnd = function _LeafletLayer_onZoomEnd() {
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_unpauseAnimation).call(this);
}, _LeafletLayer_updateTransform = function _LeafletLayer_updateTransform(center, zoom) {
    if (!this._container) {
        return;
    }
    const scale = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getZoomScale(zoom, __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getZoom());
    const position = L__namespace.DomUtil.getPosition(this._container);
    const viewHalf = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getSize().multiplyBy(0.5);
    const currentCenterPoint = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).project(__classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getCenter(), zoom);
    const destCenterPoint = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).project(center, zoom);
    const centerOffset = destCenterPoint.subtract(currentCenterPoint);
    const topLeftOffset = viewHalf.multiplyBy(-scale).add(position).add(viewHalf).subtract(centerOffset);
    if (L__namespace.Browser.any3d) {
        L__namespace.DomUtil.setTransform(this._container, topLeftOffset, scale);
    }
    else {
        L__namespace.DomUtil.setPosition(this._container, topLeftOffset);
    }
};

exports.LeafletLayer = LeafletLayer;
//# sourceMappingURL=deck.gl-leaflet.cjs.js.map
