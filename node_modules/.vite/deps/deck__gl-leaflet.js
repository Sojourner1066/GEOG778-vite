import {
  deck_default
} from "./chunk-HW6ZLSS3.js";
import {
  require_leaflet_src
} from "./chunk-74OVJCVR.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/deck.gl-leaflet/dist/deck.gl-leaflet.esm.js
var L = __toESM(require_leaflet_src());
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function getViewState(map) {
  return {
    longitude: map.getCenter().lng,
    latitude: map.getCenter().lat,
    zoom: map.getZoom() - 1,
    pitch: 0,
    bearing: 0
  };
}
function createDeckInstance(map, container, deck, props) {
  if (!deck) {
    const viewState = getViewState(map);
    deck = new deck_default({
      ...props,
      parent: container,
      controller: false,
      style: { zIndex: "auto" },
      viewState
    });
  }
  return deck;
}
function updateDeckView(deck, map) {
  const viewState = getViewState(map);
  deck.setProps({ viewState });
  deck.redraw();
}
var _LeafletLayer_instances;
var _LeafletLayer_getMap;
var _LeafletLayer_getZoomAnimated;
var _LeafletLayer_update;
var _LeafletLayer_pauseAnimation;
var _LeafletLayer_unpauseAnimation;
var _LeafletLayer_reset;
var _LeafletLayer_onMoveStart;
var _LeafletLayer_onMoveEnd;
var _LeafletLayer_onZoomStart;
var _LeafletLayer_onAnimZoom;
var _LeafletLayer_onZoom;
var _LeafletLayer_onZoomEnd;
var _LeafletLayer_updateTransform;
var LeafletLayer = class extends L.Layer {
  constructor(props) {
    super();
    _LeafletLayer_instances.add(this);
    this._container = void 0;
    this._deck = void 0;
    this._animate = void 0;
    this.props = props;
  }
  onAdd() {
    let pane = this.getPane();
    if (!pane) {
      return this;
    }
    this._container = L.DomUtil.create("div");
    this._container.className = "leaflet-layer";
    if (__classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getZoomAnimated).call(this)) {
      L.DomUtil.addClass(this._container, "leaflet-zoom-animated");
    }
    pane.appendChild(this._container);
    this._deck = createDeckInstance(this._map, this._container, this._deck, this.props);
    __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_update).call(this);
    return this;
  }
  onRemove(_map) {
    if (!this._container || !this._deck) {
      return this;
    }
    L.DomUtil.remove(this._container);
    this._container = void 0;
    this._deck.finalize();
    this._deck = void 0;
    return this;
  }
  getEvents() {
    return {
      viewreset: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_reset),
      movestart: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onMoveStart),
      moveend: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onMoveEnd),
      zoomstart: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onZoomStart),
      zoom: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onZoom),
      zoomend: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onZoomEnd),
      ...__classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getZoomAnimated).call(this) ? { zoomanim: __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_onAnimZoom) } : {}
    };
  }
  setProps(props) {
    Object.assign(this.props, props);
    if (this._deck) {
      this._deck.setProps(props);
    }
  }
  pickObject(opts) {
    if (!this._deck) {
      return null;
    }
    return this._deck.pickObject(opts);
  }
  pickMultipleObjects(opts) {
    if (!this._deck) {
      return [];
    }
    return this._deck.pickMultipleObjects(opts);
  }
  pickObjects(opts) {
    if (!this._deck) {
      return [];
    }
    return this._deck.pickObjects(opts);
  }
};
_LeafletLayer_instances = /* @__PURE__ */ new WeakSet(), _LeafletLayer_getMap = function _LeafletLayer_getMap2() {
  return this._map;
}, _LeafletLayer_getZoomAnimated = function _LeafletLayer_getZoomAnimated2() {
  return this._zoomAnimated;
}, _LeafletLayer_update = function _LeafletLayer_update2() {
  if (!this._container || !this._deck) {
    return;
  }
  if (__classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this)._animatingZoom) {
    return;
  }
  const size = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getSize();
  this._container.style.width = `${size.x}px`;
  this._container.style.height = `${size.y}px`;
  const offset = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this)._getMapPanePos().multiplyBy(-1);
  L.DomUtil.setPosition(this._container, offset);
  updateDeckView(this._deck, this._map);
}, _LeafletLayer_pauseAnimation = function _LeafletLayer_pauseAnimation2() {
  if (!this._deck) {
    return;
  }
  if (this._deck.props._animate) {
    this._animate = this._deck.props._animate;
    this._deck.setProps({ _animate: false });
  }
}, _LeafletLayer_unpauseAnimation = function _LeafletLayer_unpauseAnimation2() {
  if (!this._deck) {
    return;
  }
  if (this._animate) {
    this._deck.setProps({ _animate: this._animate });
    this._animate = void 0;
  }
}, _LeafletLayer_reset = function _LeafletLayer_reset2() {
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_updateTransform).call(this, __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getCenter(), __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getZoom());
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_update).call(this);
}, _LeafletLayer_onMoveStart = function _LeafletLayer_onMoveStart2() {
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_pauseAnimation).call(this);
}, _LeafletLayer_onMoveEnd = function _LeafletLayer_onMoveEnd2() {
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_update).call(this);
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_unpauseAnimation).call(this);
}, _LeafletLayer_onZoomStart = function _LeafletLayer_onZoomStart2() {
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_pauseAnimation).call(this);
}, _LeafletLayer_onAnimZoom = function _LeafletLayer_onAnimZoom2(event) {
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_updateTransform).call(this, event.center, event.zoom);
}, _LeafletLayer_onZoom = function _LeafletLayer_onZoom2() {
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_updateTransform).call(this, __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getCenter(), __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getZoom());
}, _LeafletLayer_onZoomEnd = function _LeafletLayer_onZoomEnd2() {
  __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_unpauseAnimation).call(this);
}, _LeafletLayer_updateTransform = function _LeafletLayer_updateTransform2(center, zoom) {
  if (!this._container) {
    return;
  }
  const scale = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getZoomScale(zoom, __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getZoom());
  const position = L.DomUtil.getPosition(this._container);
  const viewHalf = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getSize().multiplyBy(0.5);
  const currentCenterPoint = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).project(__classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).getCenter(), zoom);
  const destCenterPoint = __classPrivateFieldGet(this, _LeafletLayer_instances, "m", _LeafletLayer_getMap).call(this).project(center, zoom);
  const centerOffset = destCenterPoint.subtract(currentCenterPoint);
  const topLeftOffset = viewHalf.multiplyBy(-scale).add(position).add(viewHalf).subtract(centerOffset);
  if (L.Browser.any3d) {
    L.DomUtil.setTransform(this._container, topLeftOffset, scale);
  } else {
    L.DomUtil.setPosition(this._container, topLeftOffset);
  }
};
export {
  LeafletLayer
};
//# sourceMappingURL=deck__gl-leaflet.js.map
